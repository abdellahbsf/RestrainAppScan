package com.ras.myapp.domain;

import java.util.Random;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

public class AppDetailsTestSamples {

    private static final Random random = new Random();
    private static final AtomicLong longCount = new AtomicLong(random.nextInt() + (2 * Integer.MAX_VALUE));
    private static final AtomicInteger intCount = new AtomicInteger(random.nextInt() + (2 * Short.MAX_VALUE));

    public static AppDetails getAppDetailsSample1() {
        return new AppDetails()
            .id(1L)
            .appId("appId1")
            .riskRating("riskRating1")
            .criticalIssues(1)
            .highIssues(1)
            .mediumIssues(1)
            .lowIssues(1)
            .informationalIssues(1)
            .issuesInProgress(1)
            .maxSeverity("maxSeverity1")
            .correlationState("correlationState1")
            .rRMaxSeverity(1)
            .assetGroupId("assetGroupId1")
            .businessImpact("businessImpact1")
            .url("url1")
            .description("description1")
            .businessUnit("businessUnit1")
            .businessUnitId("businessUnitId1")
            .types("types1")
            .technology("technology1")
            .testingStatus("testingStatus1")
            .appHosts("appHosts1")
            .collateralDamagePotential("collateralDamagePotential1")
            .targetDistribution("targetDistribution1")
            .confidentialityRequirement("confidentialityRequirement1")
            .integrityRequirement("integrityRequirement1")
            .availabilityRequirement("availabilityRequirement1")
            .tester("tester1")
            .businessOwner("businessOwner1")
            .developmentContact("developmentContact1")
            .preferredOfferingType("preferredOfferingType1")
            .assetGroupName("assetGroupName1")
            .lastComment("lastComment1")
            .createdBy("createdBy1")
            .newIssues(1)
            .openIssues(1)
            .totalIssues(1)
            .totalScans(1)
            .nScanExecutions(1);
    }

    public static AppDetails getAppDetailsSample2() {
        return new AppDetails()
            .id(2L)
            .appId("appId2")
            .riskRating("riskRating2")
            .criticalIssues(2)
            .highIssues(2)
            .mediumIssues(2)
            .lowIssues(2)
            .informationalIssues(2)
            .issuesInProgress(2)
            .maxSeverity("maxSeverity2")
            .correlationState("correlationState2")
            .rRMaxSeverity(2)
            .assetGroupId("assetGroupId2")
            .businessImpact("businessImpact2")
            .url("url2")
            .description("description2")
            .businessUnit("businessUnit2")
            .businessUnitId("businessUnitId2")
            .types("types2")
            .technology("technology2")
            .testingStatus("testingStatus2")
            .appHosts("appHosts2")
            .collateralDamagePotential("collateralDamagePotential2")
            .targetDistribution("targetDistribution2")
            .confidentialityRequirement("confidentialityRequirement2")
            .integrityRequirement("integrityRequirement2")
            .availabilityRequirement("availabilityRequirement2")
            .tester("tester2")
            .businessOwner("businessOwner2")
            .developmentContact("developmentContact2")
            .preferredOfferingType("preferredOfferingType2")
            .assetGroupName("assetGroupName2")
            .lastComment("lastComment2")
            .createdBy("createdBy2")
            .newIssues(2)
            .openIssues(2)
            .totalIssues(2)
            .totalScans(2)
            .nScanExecutions(2);
    }

    public static AppDetails getAppDetailsRandomSampleGenerator() {
        return new AppDetails()
            .id(longCount.incrementAndGet())
            .appId(UUID.randomUUID().toString())
            .riskRating(UUID.randomUUID().toString())
            .criticalIssues(intCount.incrementAndGet())
            .highIssues(intCount.incrementAndGet())
            .mediumIssues(intCount.incrementAndGet())
            .lowIssues(intCount.incrementAndGet())
            .informationalIssues(intCount.incrementAndGet())
            .issuesInProgress(intCount.incrementAndGet())
            .maxSeverity(UUID.randomUUID().toString())
            .correlationState(UUID.randomUUID().toString())
            .rRMaxSeverity(intCount.incrementAndGet())
            .assetGroupId(UUID.randomUUID().toString())
            .businessImpact(UUID.randomUUID().toString())
            .url(UUID.randomUUID().toString())
            .description(UUID.randomUUID().toString())
            .businessUnit(UUID.randomUUID().toString())
            .businessUnitId(UUID.randomUUID().toString())
            .types(UUID.randomUUID().toString())
            .technology(UUID.randomUUID().toString())
            .testingStatus(UUID.randomUUID().toString())
            .appHosts(UUID.randomUUID().toString())
            .collateralDamagePotential(UUID.randomUUID().toString())
            .targetDistribution(UUID.randomUUID().toString())
            .confidentialityRequirement(UUID.randomUUID().toString())
            .integrityRequirement(UUID.randomUUID().toString())
            .availabilityRequirement(UUID.randomUUID().toString())
            .tester(UUID.randomUUID().toString())
            .businessOwner(UUID.randomUUID().toString())
            .developmentContact(UUID.randomUUID().toString())
            .preferredOfferingType(UUID.randomUUID().toString())
            .assetGroupName(UUID.randomUUID().toString())
            .lastComment(UUID.randomUUID().toString())
            .createdBy(UUID.randomUUID().toString())
            .newIssues(intCount.incrementAndGet())
            .openIssues(intCount.incrementAndGet())
            .totalIssues(intCount.incrementAndGet())
            .totalScans(intCount.incrementAndGet())
            .nScanExecutions(intCount.incrementAndGet());
    }
}
